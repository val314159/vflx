(in-package :v)

(defvar xx (list nil #\,))

(defun readx (s &optional c)
  (let* ((x (readr s))
	 (y (peekc s)))
    (if (eq x '|,|) x
	(if (member y (cons c xx)) x
	    (let* ((m (get-mchar y)))
	      (if m (let* ((z (mv-list (c m s (readc s)))))
		      (if z (return-from readx
			      (if (eq (caar z) '|,|)
				  (cons x (cdar z))
				  (cons x z)))))))))
    x))

(defun rdl (c s)
  (read-ws s)
  (if (eq   (peekc s)  c) (eat-c s)
      (cons (readx s   c) (rdl c s))))

(defun xrnl (s)
  (read-wc s)
  (if (eq   (peekc s) NL)  nil
      (cons (readx s  NL) (xrnl s))))

(defun rnl (s)
  (p- "RNL")
  (p. (xrnl s)))

(defun infix (x)
  (ecase (length x)
    (0  (list 'values))
    ;;(1  (list 'values (:0 x)))
    (1  (:0 x))
    (2  (if (eq (:1 x) '|,|)
	    (list (:1 x) (:0 x))
	    (list (:0 x) (:1 x))))
    (3  (list (:1 x) (:0 x) (:2 x)))
    (4  (if (eq (:1 x) (:3 x)) (error "X"))
     t  (list (:1 x) (:0 x) (:2 x)))
    (5  (if (eq (:1 x) (:3 x)) (error "X"))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (6  (if (eq (:1 x) (:3 x))
	    (if (eq (:1 x) (:5 x)) (error "X")))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (7  (if (eq (:1 x) (:3 x))
	    (if (eq (:1 x) (:5 x)) (error "X")))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (8  (if (eq (:1 x) (:3 x))
	    (if (eq (:1 x) (:5 x))
		(if (eq (:1 x) (:7 x)) (error "X"))))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (9  (if (eq (:1 x) (:3 x))
	    (if (eq (:1 x) (:5 x))
		(if (eq (:1 x) (:7 x)) (error "X"))))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x) (:8 x)))
    (10 (if (eq (:1 x) (:3 x))
	    (if (eq (:1 x) (:5 x))
		(if (eq (:1 x) (:7 x))
		    (if (eq (:1 x) (:9 x)) (error "X")))))
     t  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x) (:8 x)))))

(defun turn-it-on ()
  (set-mchar #\; (if (eq (peekc _1) #\;) (n (read-line _1) (values)) '|;|))
  (set-mchar #\' (list (quote quote) (readx _1)))
  (set-mchar #\$ (list (quote quote) (readx _1)))
  (set-mchar NL  (values))
  (set-mchar CR  (values))
  (set-mchar SP  (values))
  (set-mchar TB  (values))
  (set-mchar FF  (values))
  (set-mchar VT  (values))
  (set-mchar #\^ (cons 'n (loop :initially (read-ws _1)
				:collect   (rnl     _1)
				:do        (read-ws _1)
				:until     (member (peekc _1) '(#\¶ nil)))))
  (set-mchar #\¶ (values))
  (set-mchar #\~ (readx _1))
  (set-mchar #\, '\,)
  (set-mchar #\( (infix (rdl #\) _1)))
  (set-mchar #\) (error ")"))
  (set-mchar #\{ (rdl #\} _1))
  (set-mchar #\} (error "}"))
  (set-mchar #\< (rdl #\> _1))
  (set-mchar #\> (error ">")))

(defun turn-it-off ()
  (set-mchar #\( (read-delimited-list #\) _1))
  (set-mchar #\) (error ")"))
  (set-macro-character #\^ nil)
  (set-macro-character #\; nil)
  (set-macro-character #\' nil)
  (set-macro-character #\$ nil)
  (set-macro-character #\~ nil)
  (set-macro-character #\, nil)
  (set-macro-character #\{ nil)
  (set-macro-character #\} nil)
  (set-macro-character #\< nil)
  (set-macro-character #\> nil))
