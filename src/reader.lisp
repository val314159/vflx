(in-package :v)

(defun readx (s &optional c)
  (let* ((x (readr s))
	 (y (peekc s)))
    (if y (if (not (eq y c)) (let* ((m (get-mchar y)))
			       (if m (let* ((z (mv-list (c m s (readc s)))))
				       (if z (return-from readx
					       (if (eq (caar z) '|,|)
						   (cons x (cdar z))
						   (cons x z)))))))))
    x))

(defun rdl (c s)
  (read-ws s)
  (if (eq (peekc s)  c) (eat-c s)
      (cons (readx s  c) (rdl c s))))

(defun rnl (s)
  (read-wc s)
  (if (eq (peekc s) NL) (eat-c s)
      (cons (readx s NL) (rnl s))))

(defun turn-it-on ()
  (set-mchar #\' (list (quote quote) (readx _1)))
  (set-mchar #\$ (list (quote quote) (readx _1)))
  (set-mchar NL  (values))
  (set-mchar CR  (values))
  (set-mchar SP  (values))
  (set-mchar TB  (values))
  (set-mchar FF  (values))
  (set-mchar VT  (values))
  (set-mchar #\~
	     (progn
	       (read-ws _1)
	       (p. (peekc _1))
	       (if (eq (peekc _1) NL) t (error "NO"))
	       (readr _1)))
  (set-mchar #\, '\,)
  (set-mchar #\; (if (eq (peekc _1) #\;) (if (read-line _1) (values))
		     '|;|))
  (set-mchar #\( (rdl #\) _1))
  (set-mchar #\) (error ")"))
  (set-mchar #\{ (rdl #\} _1))
  (set-mchar #\} (error "}"))
  (set-mchar #\< (rdl #\> _1))
  (set-mchar #\> (error ">")))

(defun turn-it-off ()
  (set-mchar #\( (read-delimited-list #\) _1))
  (set-mchar #\) (error ")"))
  (set-macro-character #\' nil)
  (set-macro-character #\$ nil)
  (set-macro-character #\~ nil)
  (set-macro-character #\, nil)
  (set-macro-character #\; nil)
  (set-macro-character #\{ nil)
  (set-macro-character #\} nil)
  (set-macro-character #\< nil)
  (set-macro-character #\> nil))
