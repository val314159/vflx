(in-package :v)
(defconstant VT  #\Vt)
(defconstant TB  #\Tab)
(defconstant FF  #\Page)
(defconstant SP  #\Space)
(defconstant CR  #\Return)
(defconstant NL  #\Newline)
(defvar WC  (list VT TB FF SP CR))
(defvar WS  (cons NL WC))
(defvar EOL (cons NL nil))
(defun s- (&rest r) (apply #'format nil r))
(defun f- (&rest r) (apply #'format  t  r))
(defun f. (&rest r) (apply #'format  t  r) (terpri))
(defun p- (x) (prin1 x) (princ " ") x)
(defun p. (x) (prin1 x) (terpri)    x)
(defun  ws-p (c) (member c WS))
(defun  wc-p (c) (member c WC))
(defun eol-p (c) (member c EOL))
(defun sym-p (c) (mv-bind (a b) (get-mchar c) (if a b t)))
(defun readr (s) (read-preserving-whitespace s))
(defun readc (s) (read-char s))
(defun peekc (s) (peek-char nil s nil))
(defun eat-c (s) (if (peekc s) (if (readc s) nil)))
(defun read-wc  (s) (if ( wc-p (peekc s)) (cons (readc s) (read-wc  s))))
(defun read-ws  (s) (if ( ws-p (peekc s)) (cons (readc s) (read-ws  s))))
(defun read-sym (s) (if (sym-p (peekc s)) (cons (readc s) (read-sym s))))
(defun readx (s &optional c)
  (let* ((x (readr s))
	 (y (peekc s)))
    (if (eq y c) (eat-c s)
	(let* ((m (get-mchar y)))
	  (if (not m) x
	      (let* ((z (mv-list (c m s (readc s)))))
		(if z (cons x z) x)))))))
(defun read-d-list (c s)
  (read-ws s)
  (if (eq (peekc s) c) (eat-c s)
      (cons (readx s c) (read-d-list c s))))
